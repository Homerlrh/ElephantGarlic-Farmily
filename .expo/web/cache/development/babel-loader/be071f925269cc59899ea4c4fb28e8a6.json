{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { firebase, db } from \"../firebase\";\nimport { getUseWithUID } from \"./readData\";\nimport { uploadFile } from \"../storage\";\nvar Users = db.collection(\"users\");\nvar Posts = db.collection(\"posts\");\n\nfunction registerNewUser(email, password, confirmPassword, data) {\n  return _regeneratorRuntime.async(function registerNewUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(password !== confirmPassword)) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw \"Passwords don't match.\";\n\n        case 2:\n          return _context2.abrupt(\"return\", firebase.auth().createUserWithEmailAndPassword(email, password).then(function (response) {\n            var uid = response.user.uid;\n            var currentTime = firebase.firestore.FieldValue.serverTimestamp();\n            data.createdTime = currentTime;\n            data.id = uid;\n            Users.doc(uid).set(data).then(function _callee() {\n              var user;\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return _regeneratorRuntime.awrap(getUseWithUID(uid));\n\n                    case 2:\n                      user = _context.sent;\n                      return _context.abrupt(\"return\", user);\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).catch(function (error) {\n              throw error.message;\n            });\n          }).catch(function (error) {\n            throw error.message;\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction uploadFiles(imageArray) {\n  var imagesURL;\n  return _regeneratorRuntime.async(function uploadFiles$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          imagesURL = _toConsumableArray(imageArray).map(function _callee3(imageUri) {\n            return _regeneratorRuntime.async(function _callee3$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    return _context4.abrupt(\"return\", uploadFile(imageUri).then(function _callee2(data) {\n                      return _regeneratorRuntime.async(function _callee2$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              return _context3.abrupt(\"return\", data);\n\n                            case 1:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n          return _context5.abrupt(\"return\", Promise.all(imagesURL));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createPost(data) {\n  var currentTime;\n  return _regeneratorRuntime.async(function createPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          currentTime = firebase.firestore.FieldValue.serverTimestamp();\n          data.createdTime = currentTime;\n          return _context6.abrupt(\"return\", Posts.add(data).then(function (doc) {\n            Posts.doc(doc.id).update({\n              postId: doc.id\n            });\n            return doc.id;\n          }).catch(function (error) {\n            throw error.message;\n          }));\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport { registerNewUser, createPost, uploadFiles };","map":{"version":3,"sources":["/Users/homerli/Desktop/ElephantGarlic-Farmily/firebase/collection/writeData.js"],"names":["firebase","db","getUseWithUID","uploadFile","Users","collection","Posts","registerNewUser","email","password","confirmPassword","data","auth","createUserWithEmailAndPassword","then","response","uid","user","currentTime","firestore","FieldValue","serverTimestamp","createdTime","id","doc","set","catch","error","message","uploadFiles","imageArray","imagesURL","map","imageUri","Promise","all","createPost","add","update","postId"],"mappings":"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","sourcesContent":["import { firebase, db } from \"../firebase\";\nimport { getUseWithUID } from \"./readData\";\nimport { uploadFile } from \"../storage\";\nconst Users = db.collection(\"users\");\nconst Posts = db.collection(\"posts\");\n\nasync function registerNewUser(email, password, confirmPassword, data) {\n\tif (password !== confirmPassword) {\n\t\tthrow \"Passwords don't match.\";\n\t}\n\treturn firebase\n\t\t.auth()\n\t\t.createUserWithEmailAndPassword(email, password)\n\t\t.then((response) => {\n\t\t\tconst uid = response.user.uid;\n\t\t\tconst currentTime = firebase.firestore.FieldValue.serverTimestamp();\n\t\t\tdata.createdTime = currentTime;\n\t\t\tdata.id = uid;\n\t\t\tUsers.doc(uid)\n\t\t\t\t.set(data)\n\t\t\t\t.then(async () => {\n\t\t\t\t\tconst user = await getUseWithUID(uid);\n\t\t\t\t\treturn user;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthrow error.message;\n\t\t\t\t});\n\t\t})\n\t\t.catch((error) => {\n\t\t\tthrow error.message;\n\t\t});\n}\n\nasync function uploadFiles(imageArray) {\n\tlet imagesURL = [...imageArray].map(async (imageUri) => {\n\t\treturn uploadFile(imageUri).then(async (data) => {\n\t\t\treturn data;\n\t\t});\n\t});\n\treturn Promise.all(imagesURL);\n}\n\nasync function createPost(data) {\n\tconst currentTime = firebase.firestore.FieldValue.serverTimestamp();\n\tdata.createdTime = currentTime;\n\treturn Posts.add(data)\n\t\t.then((doc) => {\n\t\t\tPosts.doc(doc.id).update({\n\t\t\t\tpostId: doc.id,\n\t\t\t});\n\n\t\t\treturn doc.id;\n\t\t})\n\t\t.catch((error) => {\n\t\t\tthrow error.message;\n\t\t});\n}\n\nexport { registerNewUser, createPost, uploadFiles };\n"]},"metadata":{},"sourceType":"module"}