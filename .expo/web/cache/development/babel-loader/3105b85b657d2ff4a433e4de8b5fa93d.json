{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"react-native-get-random-values\";\nimport { storage } from \"./firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nvar uriToBlob = function uriToBlob(uri) {\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n\n    xhr.onerror = function () {\n      reject(new Error(\"uriToBlob failed\"));\n    };\n\n    xhr.responseType = \"blob\";\n    xhr.open(\"GET\", uri, true);\n    xhr.send(null);\n  });\n};\n\nexport function uploadFile(uri) {\n  var file, name;\n  return _regeneratorRuntime.async(function uploadFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(uriToBlob(uri));\n\n        case 2:\n          file = _context.sent;\n          name = uuidv4();\n          return _context.abrupt(\"return\", new Promise(function (res, rej) {\n            var storageRef = storage.ref();\n            var childRef = storageRef.child(name);\n            var uploadTask = childRef.put(file);\n            uploadTask.on(\"state_changed\", function (snapshot) {}, function (err) {\n              console.log(\"failed to upload photo\");\n              rej(err);\n            }, function () {\n              uploadTask.snapshot.ref.getDownloadURL().then(function (url) {\n                res(url);\n              });\n            });\n          }));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/homerli/Desktop/ElephantGarlic-Farmily/firebase/storage.js"],"names":["storage","v4","uuidv4","uriToBlob","uri","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","Error","responseType","open","send","uploadFile","file","name","res","rej","storageRef","ref","childRef","child","uploadTask","put","on","snapshot","err","console","log","getDownloadURL","then","url"],"mappings":";AAAA,OAAO,gCAAP;AACA,SAASA,OAAT;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AAC1B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AACAD,IAAAA,GAAG,CAACE,MAAJ,GAAa,YAAY;AAExBJ,MAAAA,OAAO,CAACE,GAAG,CAACG,QAAL,CAAP;AACA,KAHD;;AAIAH,IAAAA,GAAG,CAACI,OAAJ,GAAc,YAAY;AAEzBL,MAAAA,MAAM,CAAC,IAAIM,KAAJ,CAAU,kBAAV,CAAD,CAAN;AACA,KAHD;;AAKAL,IAAAA,GAAG,CAACM,YAAJ,GAAmB,MAAnB;AACAN,IAAAA,GAAG,CAACO,IAAJ,CAAS,KAAT,EAAgBX,GAAhB,EAAqB,IAArB;AACAI,IAAAA,GAAG,CAACQ,IAAJ,CAAS,IAAT;AACA,GAdM,CAAP;AAeA,CAhBD;;AAkBA,OAAO,SAAeC,UAAf,CAA0Bb,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACaD,SAAS,CAACC,GAAD,CADtB;;AAAA;AACAc,UAAAA,IADA;AAEAC,UAAAA,IAFA,GAEOjB,MAAM,EAFb;AAAA,2CAGC,IAAIG,OAAJ,CAAY,UAACe,GAAD,EAAMC,GAAN,EAAc;AAChC,gBAAMC,UAAU,GAAGtB,OAAO,CAACuB,GAAR,EAAnB;AACA,gBAAMC,QAAQ,GAAGF,UAAU,CAACG,KAAX,CAAiBN,IAAjB,CAAjB;AACA,gBAAMO,UAAU,GAAGF,QAAQ,CAACG,GAAT,CAAaT,IAAb,CAAnB;AAEAQ,YAAAA,UAAU,CAACE,EAAX,CACC,eADD,EAEC,UAAUC,QAAV,EAAoB,CAAE,CAFvB,EAGC,UAAUC,GAAV,EAAe;AACdC,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAX,cAAAA,GAAG,CAACS,GAAD,CAAH;AACA,aANF,EAOC,YAAY;AACXJ,cAAAA,UAAU,CAACG,QAAX,CAAoBN,GAApB,CAAwBU,cAAxB,GAAyCC,IAAzC,CAA8C,UAACC,GAAD,EAAS;AAEtDf,gBAAAA,GAAG,CAACe,GAAD,CAAH;AACA,eAHD;AAIA,aAZF;AAcA,WAnBM,CAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import \"react-native-get-random-values\";\nimport { storage } from \"./firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst uriToBlob = (uri) => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.onload = function () {\n\t\t\t// return the blob\n\t\t\tresolve(xhr.response);\n\t\t};\n\t\txhr.onerror = function () {\n\t\t\t// something went wrong\n\t\t\treject(new Error(\"uriToBlob failed\"));\n\t\t};\n\t\t// this helps us get a blob\n\t\txhr.responseType = \"blob\";\n\t\txhr.open(\"GET\", uri, true);\n\t\txhr.send(null);\n\t});\n};\n\nexport async function uploadFile(uri) {\n\tconst file = await uriToBlob(uri);\n\tconst name = uuidv4();\n\treturn new Promise((res, rej) => {\n\t\tconst storageRef = storage.ref();\n\t\tconst childRef = storageRef.child(name);\n\t\tconst uploadTask = childRef.put(file);\n\n\t\tuploadTask.on(\n\t\t\t\"state_changed\",\n\t\t\tfunction (snapshot) {},\n\t\t\tfunction (err) {\n\t\t\t\tconsole.log(\"failed to upload photo\");\n\t\t\t\trej(err);\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tuploadTask.snapshot.ref.getDownloadURL().then((url) => {\n\t\t\t\t\t//console.log(`File available at ${url}`);\n\t\t\t\t\tres(url);\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}